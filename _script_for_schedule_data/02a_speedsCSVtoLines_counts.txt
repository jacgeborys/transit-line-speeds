import geopandas as gpd
import pandas as pd
from shapely.geometry import LineString

# Assuming iface.activeLayer() is defined in your QGIS environment
layer = iface.activeLayer()

# Check if the layer is valid and is a vector layer
if not layer or not layer.type() == QgsMapLayer.VectorLayer:
    print("No active vector layer selected. Please select a vector layer.")
else:
    # Extracting attributes into a list of dictionaries
    data_list = [feat.attributes() for feat in layer.getFeatures()]
    column_names = [field.name() for field in layer.fields()]
    
    # Creating DataFrame from attributes
    df = pd.DataFrame(data_list, columns=column_names)
    
    # Assuming shape_pt_lon and shape_pt_lat columns are present in your layer
    # Convert DataFrame to GeoDataFrame
    gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.shape_pt_lon, df.shape_pt_lat))
    
    # Ensure the points are in the correct order
    gdf_sorted = gdf.sort_values(['shape_id', 'shape_pt_sequence'])
    
    # Function to create individual segments
    def create_segments(group):
        segments = []
        points = list(group.geometry)
        for i in range(len(points) - 1):
            segment = LineString([points[i], points[i + 1]])
            segments.append({
                'geometry': segment,
                'shape_id': group['shape_id'].iloc[0],
                'trip_count': group['trip_count'].iloc[0],  # Assuming trip_count is consistent within each group
                'vehicle': group['vehicle_type'].iloc[0]  # Passing vehicle_type to each segment
            })
        return segments
    
    # Apply the function to each group and concatenate the results
    segments_list = gdf_sorted.groupby('shape_id').apply(create_segments).explode().tolist()
    
    # Convert the list of dictionaries to a DataFrame
    segments_df = pd.DataFrame(segments_list)
    
    # Convert the DataFrame to a GeoDataFrame
    segments_gdf = gpd.GeoDataFrame(segments_df, geometry='geometry')
    
    # Ensure the GeoDataFrame has a defined CRS, assuming your original data is in WGS 84
    segments_gdf.crs = "EPSG:4326"
    
    # Save to a shapefile
    output_path = "C:/Users/Asus/OneDrive/Pulpit/Rozne/QGIS/TransitLineSpeeds/_schedule_data/2024_01_19/individual_segments.shp"
    segments_gdf.to_file(output_path)
    
    print("Individual segments shapefile saved successfully.")